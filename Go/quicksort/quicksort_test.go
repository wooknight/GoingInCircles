//

package main

import (
	"fmt"
	"reflect"
	"testing"
)

func TestQuicksort(t *testing.T) {

	testvalues := []struct {
		input  []int
		result []int
	}{
		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3, 62, 63, 76, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999},
			result: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61, 62, 63, 76, 77, 78, 88, 90, 105, 108, 110, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999},
		},
	}
	for _, tt := range testvalues {

		quicksort(tt.input, 0, len(tt.input)-1)
		fmt.Printf("Testing . Need %v \n%d\n. Got %v\n%d\n\n", tt.result, len(tt.result), tt.input, len(tt.input))
		if reflect.DeepEqual(tt.input, tt.result) == false {
			t.Errorf("Result not matching . Need %v . Got %v", tt.result, tt.input)
		}
	}
}

func TestPartition(t *testing.T) {

	testvalues := []struct {
		input      []int
		idx, pivot int
	}{
		{
			input: []int{61, 7, 10, 12, 16, 4, 17}, idx: 2, pivot: 2,
		},
		{
			input: []int{61, 7, 10, 12, 16, 4, 17}, idx: 6, pivot: 1,
		},
		{
			input: []int{61, 7, 10, 12, 16, 4, 17}, idx: 1, pivot: 7,
		},
	}

	for _, tt := range testvalues {
		pivot := partition(tt.input, tt.idx)
		if pivot != tt.pivot {
			t.Errorf("Expected - %v\n\nGot %v \n %v\n", tt.pivot, pivot, tt.input)
		}
	}
}

func BenchmarkQuicksort(b *testing.B) {

	testvalues := []struct {
		input  []int
		result []int
	}{
		{
			input:  []int{61, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 3, 62, 63, 76, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999},
			result: []int{3, 4, 7, 10, 12, 16, 17, 20, 21, 22, 30, 31, 39, 40, 51, 54, 55, 57, 60, 61, 62, 63, 76, 77, 78, 88, 90, 105, 108, 110, 116, 119, 126, 128, 130, 131, 132, 133, 134, 136, 146, 151, 163, 166, 170, 172, 180, 184, 191, 198, 199, 204, 209, 217, 218, 221, 231, 232, 234, 237, 257, 258, 259, 262, 265, 272, 273, 277, 278, 286, 289, 291, 292, 293, 297, 303, 305, 309, 312, 317, 318, 322, 325, 326, 328, 329, 333, 340, 346, 353, 356, 359, 360, 368, 373, 378, 382, 383, 390, 394, 397, 401, 403, 413, 416, 418, 423, 425, 429, 432, 434, 435, 437, 438, 447, 451, 457, 458, 462, 463, 468, 474, 475, 480, 484, 493, 494, 508, 510, 526, 527, 529, 540, 547, 548, 552, 557, 561, 563, 567, 570, 571, 574, 576, 586, 588, 592, 596, 597, 602, 603, 604, 624, 625, 629, 632, 635, 639, 641, 643, 644, 647, 655, 656, 657, 661, 672, 673, 677, 679, 682, 684, 686, 696, 699, 703, 711, 712, 716, 718, 719, 720, 726, 728, 730, 738, 750, 751, 753, 754, 755, 765, 766, 768, 771, 780, 785, 788, 797, 798, 804, 809, 811, 814, 820, 825, 826, 827, 828, 829, 831, 832, 841, 843, 845, 846, 850, 860, 865, 867, 873, 879, 887, 892, 898, 906, 908, 909, 911, 917, 918, 920, 930, 937, 939, 950, 953, 958, 959, 966, 967, 972, 978, 981, 983, 987, 988, 996, 997, 1012, 1016, 1018, 1021, 1026, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1048, 1051, 1052, 1054, 1060, 1061, 1062, 1064, 1068, 1069, 1073, 1076, 1081, 1082, 1083, 1086, 1088, 1090, 1091, 1098, 1100, 1101, 1102, 1103, 1112, 1115, 1117, 1122, 1123, 1125, 1129, 1134, 1139, 1152, 1155, 1159, 1162, 1166, 1170, 1174, 1175, 1183, 1188, 1190, 1197, 1203, 1215, 1217, 1221, 1228, 1230, 1233, 1240, 1247, 1249, 1251, 1260, 1261, 1265, 1269, 1273, 1275, 1276, 1281, 1282, 1283, 1289, 1290, 1314, 1315, 1322, 1328, 1333, 1336, 1337, 1340, 1347, 1351, 1364, 1369, 1370, 1371, 1377, 1387, 1388, 1396, 1398, 1399, 1400, 1401, 1406, 1415, 1417, 1420, 1421, 1427, 1433, 1434, 1435, 1437, 1458, 1459, 1463, 1468, 1475, 1478, 1480, 1481, 1488, 1494, 1496, 1501, 1502, 1512, 1517, 1518, 1520, 1521, 1525, 1528, 1534, 1543, 1546, 1547, 1551, 1555, 1557, 1562, 1565, 1573, 1581, 1589, 1593, 1595, 1598, 1599, 1606, 1607, 1620, 1622, 1627, 1628, 1637, 1638, 1640, 1641, 1646, 1660, 1661, 1665, 1675, 1679, 1691, 1697, 1703, 1708, 1712, 1714, 1715, 1721, 1726, 1731, 1737, 1747, 1750, 1753, 1760, 1762, 1764, 1769, 1772, 1777, 1779, 1780, 1799, 1800, 1803, 1805, 1811, 1815, 1821, 1828, 1830, 1833, 1841, 1842, 1843, 1844, 1845, 1849, 1851, 1852, 1854, 1856, 1862, 1865, 1868, 1870, 1874, 1879, 1880, 1890, 1896, 1900, 1901, 1902, 1905, 1906, 1916, 1919, 1941, 1942, 1943, 1945, 1946, 1948, 1949, 1950, 1952, 1955, 1958, 1966, 1968, 1974, 1978, 1979, 1981, 1983, 1986, 1992, 1993, 1999},
		},
	}

	for i := 0; i < b.N; i++ {

		quicksort(testvalues[0].input, 0, len(testvalues[0].input))
		if reflect.DeepEqual(testvalues[0].input, testvalues[0].result) {
			b.Errorf("Result not matching . Need %v . Got %v", testvalues[0].result, testvalues[0].input)
		}
	}
}
